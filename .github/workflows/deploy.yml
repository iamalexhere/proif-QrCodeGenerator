name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  deploy:
    # Only run on merged pull requests or direct pushes to main
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        debug: true
        script: |
          echo "‚úÖ SSH connection successful!"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Server hostname: $(hostname)"
          
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        debug: true
        script: |
          # Navigate to project directory
          echo "üìÇ Navigating to project directory: ${{ secrets.PROJECT_PATH }}"
          cd ${{ secrets.PROJECT_PATH }}
          
          # Verify we're in the right directory
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Check git status
          echo "üîç Git status before pull:"
          git status
          
          # Pull latest changes from main branch
          echo "üöÄ Pulling latest changes..."
          git pull origin main
          
          # Verify git pull success
          echo "üîç Git status after pull:"
          git status
          
          # Check if composer.json exists
          if [ ! -f "composer.json" ]; then
            echo "‚ùå composer.json not found!"
            exit 1
          fi
          
          # Install/update composer dependencies
          echo "üì¶ Installing composer dependencies..."
          composer install --no-dev --optimize-autoloader --no-interaction --verbose
          
          # Verify composer install
          if [ $? -eq 0 ]; then
            echo "‚úÖ Composer install successful"
          else
            echo "‚ùå Composer install failed"
            exit 1
          fi
          
          # Run setup script to ensure configuration
          if [ -f "setup.php" ]; then
            echo "‚öôÔ∏è Running setup script..."
            php setup.php
          else
            echo "‚ö†Ô∏è setup.php not found, skipping..."
          fi
          
          # Create uploads directory if it doesn't exist
          echo "üìÅ Ensuring uploads directory exists..."
          mkdir -p public/uploads
          
          # Set proper permissions for uploads directory
          echo "üîê Setting permissions..."
          chmod -R 755 public/uploads
          
          # Verify final state
          echo "üîç Final verification:"
          echo "Project directory: $(pwd)"
          echo "Uploads directory permissions: $(ls -ld public/uploads)"
          
          echo "‚úÖ Deployment completed successfully!"